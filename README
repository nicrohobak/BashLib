==============================================================================
| BashLib -- A Bash Scripting Library					     |
==============================================================================

------------------------------------------------------------------------------
 Installation
------------------------------------------------------------------------------

    - Copy this directory (or create a symlink) to /usr/local/share/BashLib

    - Add one of these simple snippets to the top of your script:

        ######################################################################
        # Include BashLib (basic)
        ######################################################################

        BASH_LIB="/usr/local/share/BashLib"

        if [ -e "${BASH_LIB}/BashLib.sh" ]; then
            source "${BASH_LIB}/BashLib.sh"
        else
            echo "Error: BashLib not found (${BASH_LIB})" 1>&2
            exit 1
        fi

        ######################################################################
        ######################################################################


        ######################################################################
        # Include BashLib (attempt auto-install if missing)
        ######################################################################

        BASH_LIB="/usr/local/share/BashLib"

        if [ -e "${BASH_LIB}/BashLib.sh" ]; then
            source "${BASH_LIB}/BashLib.sh"
        else
            echo "Error: BashLib not found (${BASH_LIB})" 1>&2

            function BashLib_AttemptInstall
            {   
                local BASH_LIB_REPO="https://github.com/nicrohobak/BashLib"

                # Git is preferred...
                if [ "$(which git)" != "" ]; then
                    echo "Detected 'git'.  Cloning repository into '${BASH_LIB}' now..."
                    git clone "${BASH_LIB_REPO}" "${BASH_LIB}"

                    if [ "${?}" != "0" ]; then
                        echo "Error: Failed to 'git clone \"${BASH_LIB_REPO}\" \"${BASH_LIB}\"'."
                        return 1
                    fi
                else
                    # ...but we can still make an attempt without it
                    echo "Failed to detect 'git'.  Attempting an alternative download method."

                    # Quick, basic dependency checking
                    if [ "$(which wget)" = "" ]; then
                        echo "Error: Please install 'wget' and try this installation again." 1>&2
                        return 1
                    fi

                    if [ "$(which unzip)" = "" ]; then
                        echo "Error: Please install 'unzip' and try this installation again." 1>&2
                        return 1
                    fi

                    local BASH_LIB_ZIP="${BASH_LIB_REPO}/archive/master.zip"
                    local BASH_LIB_LOCAL_ZIP="BashLib.zip"
                    local BASH_LIB_LOCAL_DIR="BashLib-master"
                    wget "${BASH_LIB_ZIP}" -O "${BASH_LIB_LOCAL_ZIP}" &> /dev/null

                    if [ "${?}" != "0" ]; then
                        echo "Error: Failed to download '${BASH_LIB_ZIP}' (as '${BASH_LIB_LOCAL_ZIP}')." 1>&2
                        return 1
                    fi

                    # The result of this should be a directory called 'BashLib-master' (${BASH_LIB_LOCAL_DIR})
                    unzip "${BASH_LIB_LOCAL_ZIP}"

                    if [ "${?}" != "0" ]; then
                        # Cleanup what we can
                        rm "${BASH_LIB_LOCAL_ZIP}"
                        echo "Error: Failed to unzip '${BASH_LIB_ZIP}'." 1>&2
                        return 1
                    fi

                    # Move the resulting directory into the final location
                    mv "${BASH_LIB_LOCAL_DIR}" "${BASH_LIB}"

                    if [ "${?}" != "0" ]; then
                        # Cleanup what we can
                        rm "${BASH_LIB_LOCAL_ZIP}"
                        rm -r "${BASH_LIB_LOCAL_DIR}"
                        echo "Error: Failed to move '${BASH_LIB_LOCAL_DIR}' to '${BASH_LIB}'." 1>&2
                        return 1
                    fi

                    echo "BashLib was successfully installed at '${BASH_LIB}'."

                    # Cleanup
                    rm "${BASH_LIB_LOCAL_ZIP}"
                fi

                return 0
            }

            function BashLib_AskToInstall
            {   
                local ATTEMPT_INSTALL
                read -p "Would you like me to attempt to install BashLib for you? (y/N): " ATTEMPT_INSTALL

                case "${ATTEMPT_INSTALL}" in
                    y|Y)
                        BashLib_AttemptInstall || exit 1
                        ;;
                    *)
                        echo "Error: No suitable version of BashLib found.  Exiting." 1>&2
                        exit 1
                        ;;
                esac

                return 0
            }

            BashLib_AskToInstall

            # Cleanup
            unset BashLib_AskToInstall
            unset BashLib_Install
        fi

        ######################################################################
        ######################################################################


------------------------------------------------------------------------------
 Overview
------------------------------------------------------------------------------

    Functions
    ---------
	- GetAbsolutePath		- Gets the absolute path of a file
	- GetOSVersion			- Gets the current OS version
        - HasSudoAccess                 - Returns true if probability is high

	Apache				- Functions related to Apache
	------
	    - GetApacheVersion		- Gets the current Apache version

        Builtin
        -------
            - Glob                      - (on|off) Enables/disables globbing
            - RestoreIFS                - Resets IFS to default: " \n\t"
            - SetIFS                    - Sets new IFS value

	Input				- Functions related to user input
	-----
	    - Confirm			- Prompt the user with a (y/n)?
					  confirmation question.  Doesn't
					  continue until answered.
	    - ConfirmN			- Like Confirm, but (y/N)?
	    - ConfirmY			- Like Confirm, but (Y/n)?
	    - Select			- Presents a list of options to the
					  user and requests a selection

	Installer			- Functions that help with file
	---------			  management
	    - InstallFiles		- Copies the contents of a
					  directory to another target,
					  moving anything that might already
					  exist into a cache
	    - UninstallFiles		- Removes the contents of a
					  directory from another target,
					  also by moving to a cache
	    - MoveToCache		- Moves a file/directory to the
					  specified cache location
	    - RestoreFromCache		- Moves a file/directory from the
					  cache back into the restore
					  location
	    - VerifyFiles		- Verifies that all of the files in
					  the source also exist in the
					  destination
            - FindPackageManager        - Attempts to discover the system's
                                          package manager
          * - InstallPackages           - Attempts to install packages with
                                          the system's package manager
          * - RemovePackages            - Attempts to remove packages with
                                          the system's package manager

	ls				- Functions that assist with ls
	--
	    - lsPermToChmodStr		- Converts ls permission string into
					  the equivalent string argument for
					  chmod
	    - lsPermToOctStr		- Converts ls permission string into
					  the equivalent octal argument for
					  chmod
	    - _lsPermTriadToNum		- Converts ls permission string triad
					  into its octal equivalent

	Output				- Functions related to displaying
	------				  output
            - PrintVars                 - Displays the name and value of the
                                          variables provided
	    - Error			- Prints a message to stderr
	    - Fatal			- Prints a message to stderr and
					  exits the script with status 1
	    - Print			- Prints a message to stdout (echo)
	    - Warn			- Prints a message to stderr
	    - Log			- Prints a timestamped message to
					  stdout
	    - ErrLog			- Prints a timestamped message to
					  stderr
	    - FatalLog			- Prints a timestamped message to
					  stderr and exits the script with
                                          status 1
        Rkt                             - Functions related to Rocket
        ---                               containers
            - RktFindImage              - Attempts to find a specific rkt
                                          image by name or sha512 ID, helpful
                                          when building images based upon
                                          other images in your local store
            - RktFindImageID            - Attempts to find an image in the
                                          local store by name
            - RktFindPreparedImage      - Attempts to find a prepared image
                                          among the local pods, by name or ID
            - RktFindRunningImage       - Attempts to find a running image
                                          among the local pods, by name or ID

	String				- Functions for string manipulation
	------
	    - Append			- Appends new content to a variable
            - EatWhite                  - Removes all leading/trailing
                                          whitespace characters
            - EscapeSpecialChars        - Adds backslash 'escapes' to special
                                          Bash characters
            - EscapeStringChars         - Escapes characters for double-quote
                                          strings
	    - StrToLower		- Converts a string to lowercase


    * - Requires 'sudo' access to function properly

==============================================================================


